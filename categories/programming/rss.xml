<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Programming on Elektrubadur</title>
    <link>https://elektrubadur.se/categories/programming/</link>
    <description>Recent content in Programming on Elektrubadur</description>
    <language>en</language>
    <copyright>© 2010–2024 Björn Lindström</copyright>
    <lastBuildDate>Sun, 28 May 2023 00:00:00 +0200</lastBuildDate>
    <atom:link href="https://elektrubadur.se/categories/programming/rss.xml" rel="self" type="application/rss+xml"/>
    <item>
      <title>Converting Sources of This Blog to Org format</title>
      <link>https://elektrubadur.se/posts/converting_blog_to_org/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0200</pubDate>
      <guid>https://elektrubadur.se/posts/converting_blog_to_org/</guid>
      <description>&lt;p&gt;
It looks a bit bad that the last entry here was three years ago and was about how the site generation works, and here is another one on the same topic. However, it&amp;#39;s in the interest of making it more enjoyable for me to write more that I&amp;#39;ve switched from &lt;a href="https://www.getzola.org/"&gt;Zola&lt;/a&gt; to &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt; in order to be able to keep the sources in Org format.&lt;/p&gt;
&lt;p&gt;
Here I&amp;#39;ll just share &lt;a href="https://elektrubadur.se/posts/converting_blog_to_org/convert.py
"&gt;the script&lt;/a&gt; I made to do the format conversion, in case it&amp;#39;s useful for anyone else. Actually, half the reason I&amp;#39;m even writing this entry is that I will need to later on repeat this process for another page I manage, and this way I have the script and some notes for then.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vimwiki + Nextcloud Notes</title>
      <link>https://elektrubadur.se/posts/vimwiki_and_nextcloud/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0200</pubDate>
      <guid>https://elektrubadur.se/posts/vimwiki_and_nextcloud/</guid>
      <description>&lt;p&gt;
I&amp;#39;ve been using &lt;a href="http://vimwiki.github.io/"&gt;Vimwiki&lt;/a&gt; for a while, which lets me keep interlinked plain text notes on my computer with minimal hassle.&lt;/p&gt;
&lt;p&gt;
For a while I&amp;#39;ve also kept these synced to my phone via the &lt;a href="https://apps.nextcloud.com/apps/notes/"&gt;Nextcloud Notes&lt;/a&gt; application. I have a self-hosted &lt;a href="https://nextcloud.com/"&gt;Nextcloud&lt;/a&gt; instance, and simply point Vimwiki on my computer to the same directory in the directory that I have synchronized with Nextcloud.&lt;/p&gt;
&lt;p&gt;
The Nextcloud Notes app uses Markdown, so I have to configure Vimwiki to use that syntax, which is fine with me. One quirk of the Nextcloud Notes app is that rather than letting you name files independently, it will change filenames to whatever the first line of your note is. Until today that meant I had to keep making sure in Vimwiki to add those headers, but I&amp;#39;ve now finally automated that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple Nextcloud To-Do List Automation with Python and WebDAV</title>
      <link>https://elektrubadur.se/posts/nextcloud_to_do_automation/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0200</pubDate>
      <guid>https://elektrubadur.se/posts/nextcloud_to_do_automation/</guid>
      <description>&lt;p&gt;
I keep a task list in a &lt;a href="http://todotxt.org/"&gt;todo.txt&lt;/a&gt; format in
&lt;a href="https://nextcloud.com/"&gt;Nextcloud&lt;/a&gt;. They are simply kept as two text
files, &lt;code class="verbatim"&gt;todo.txt&lt;/code&gt; and &lt;code class="verbatim"&gt;done.txt&lt;/code&gt; in the root of my Nextcloud user
directory.&lt;/p&gt;
&lt;p&gt;
Some clients already have the option to move tasks from &lt;code class="verbatim"&gt;todo.txt&lt;/code&gt; to
&lt;code class="verbatim"&gt;done.txt&lt;/code&gt; when you mark a task as done. However, I would prefer they
stick around in the &lt;code class="verbatim"&gt;todo.txt&lt;/code&gt; for a while, in case I change my mind.&lt;/p&gt;
&lt;p&gt;
At first I thought I&amp;#39;d just write a script to run as a cronjob on the
server hosting Nextcloud, but that won&amp;#39;t work with syncrhonization, as
it won&amp;#39;t let Nextcloud know the files have changed. I then thought there
must be an API to read/write files to Nextcloud, and then quickly
realized that this API is
&lt;a href="https://tools.ietf.org/html/rfc2518"&gt;WebDAV&lt;/a&gt;. So, I should be able to
make a Python script to do this, using
&lt;a href="https://pypi.org/project/requests/"&gt;requests&lt;/a&gt;. A more full-featured
WebDAV library would be overkill for this.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
